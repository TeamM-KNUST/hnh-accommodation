// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}


enum UserRole {
  ADMIN
  USER
  MODERATOR
}

enum RoomCount {
  ONE_IN_A_ROOM
  TWO_IN_A_ROOM
  THREE_IN_A_ROOM
  FOUR_IN_A_ROOM
}

enum RoomType {
  MALE
  FEMALE
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String    @unique
  emailVerified       DateTime?
  image               String?
  favoriteIds         String[]
  password            String?
  confirmPassword     String?

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  role                UserRole  @default(USER)

  accounts            Account[]
  purchases           Purchase[]
  reviews             Review[]
  listings            Listing[]
  reservations        Reservation[]
  favorites           Favorite[]
  twoFactorConfirmation TwoFactorConfirmation?

  isTwoFactorEnabled  Boolean   @default(false)

  @@index([role])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                 String      @id @default(cuid())
  imageSrc           String
  userId             String
  title              String
  description        String
  createdAt          DateTime    @default(now())
  locationValue      String
  category           String

  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases          Purchase[]
  rooms              Room[]
  favorites          Favorite[]
  reviews            Review[]

  @@index([createdAt])
  @@index([locationValue])
  @@index([category])
}

model Room {
  id                 String      @id @default(cuid())
  listingId          String
  price              Float?
  capacity           RoomCount?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  type               RoomType?
  listing            Listing     @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reservations       Reservation[]
  roomImages         RoomImage[]

  @@index([listingId])
  @@index([price])
}

model RoomImage {
  id                 String      @id @default(cuid())
  roomId             String
  imageSrc           String
  createdAt          DateTime    @default(now())

  room               Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
}


model Reservation {
  id                 String      @id @default(cuid())
  userId             String
  roomId             String
  startDate          DateTime
  endDate            DateTime
  totalPrice         Int
  createdAt          DateTime    @default(now())

  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  room               Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([roomId])
  @@index([startDate, endDate])
}

model Review {
  id                 String      @id @default(cuid())
  userId             String
  listingId          String
  rating             Int         @default(0)
  comment            String?
  createdAt          DateTime    @default(now())

  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing            Listing     @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([listingId])
}

model Favorite {
  id                 String      @id @default(cuid())
  userId             String
  listingId          String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing            Listing     @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
}

model VerificationToken {
  id                 String      @id @default(cuid())
  email              String
  token              String      @unique
  expires            DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id                 String      @id @default(cuid())
  email              String
  token              String      @unique
  expires            DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                 String      @id @default(cuid())
  email              String
  token              String      @unique
  expires            DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                 String      @id @default(cuid())

  userId             String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Purchase {
  id                 String      @id @default(uuid())
  userId             String
  listingId          String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing            Listing     @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@index([listingId])
}

model StripeCustomer {
  id                 String      @id @default(uuid())
  userId             String      @unique
  stripeCustomerId   String      @unique

  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}
