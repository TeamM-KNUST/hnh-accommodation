// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MODERATOR

}

// Define the User model with the following fields:
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  favoriteIds   String[]
  password      String?
  confirmPassword String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  role          UserRole @default(USER)

  accounts      Account[]
  listings     Listing[]
  reservations Reservation[]
  favorites    Favorite[]
  twoFactorConfirmation TwoFactorConfirmation?

  isTwoFactorEnabled Boolean @default(false)

  @@index([role])

}


// Define the Account model with the following fields:
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}



// Define the Listing model with the following fields:
model Listing {
  id                 String  @id @default(cuid())
  imageSrc        String
  userId          String   
  title           String
  description     String
  createdAt       DateTime? @default(now())
  roomCount       Int?
  locationValue   String
  price           Int?
  category       String

  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchase        Purchase[]

  reservations    Reservation[]
  favorites       Favorite[]

  @@index([createdAt])
 
}


model Reservation {
  id                 String  @id @default(cuid())
  userId           String 
  listingId        String 
  startDate        DateTime
  endDate          DateTime
  totalPrice       Int
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)


  @@index([startDate, endDate])
}


// Define the Favorite model with the following fields:
model Favorite {
  id                String  @id @default(cuid())
  userId          String
  listingId       String 
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing         Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
}

// Define the VerificationToken, PasswordResetToken, TwoFactorToken, and TwoFactorConfirmation models with the following fields:
model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}



model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Purchase {
  id String @id @default(uuid())
  userId String

  listingId String
  course Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, listingId])
  @@index([listingId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}